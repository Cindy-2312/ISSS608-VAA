---
title: "Take-home Exercise 02"
author: "Cindy TA"
format: html
---

# 1. Getting Started

## 1.1. Loading R packages

In this take-home exercise, the 4 packages below will be used:

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph, knitr)
```

## 1.2. Importing knowledge graph data

For the purpose of this exercise, MC1_graph.json file will be used. In the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object

```{r}
kg <- fromJSON("C:/Cindy-2312/ISSS608-VAA/Take-home_Exercise/MC1_release/MC1_graph.json")
```

## 1.3. Extracting the edges and nodes table

Next, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from kg object into two separate tibble data frames called nodes_tbl and edges_tbl respectively.

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links) 
```

## 1.4. Mapping from node id to row index

Before we can go ahead to build the tidygraph object, it is important for us to ensure each id from the node list is mapped to the correct row number. This requirement can be achieved by using the code chunk below.

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

## 1.5. Map source and target IDs to row indices

Next, we will map the source and the target IDs to row indices by using the code chunk below.

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

## 1.6. Filter out any unmatched (invalid) edges

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

## 1.7. Creating tidygraph()

```{r}
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
class(graph)
```

# Question 1: Who has Sailor Shift been most influenced by over time?

### Standardize column names

```{r}
edges_tbl <- edges_tbl %>%
  rename(type = `Edge Type`)
```

### Check what edge types are available (e.g., InfluencedBy, InStyleOf, etc.)

```{r}
unique_edge_types <- unique(edges_tbl$type)
print(unique_edge_types)
```

### Get Sailor Shift's node ID

```{r}
sailor_id <- nodes_tbl %>%
  filter(name == "Sailor Shift") %>%
  pull(id)
```

### Try multiple influence-related edge types

```{r}
influence_types <- c("InterpolatesFrom", "RecordedBy", "PerformerOfComposerOf", "ProducerOf","InStyleOf", "LyricalReferenceTo" ,"CoverOf","DistributedBy","MemberOf", "LyricistOf", "DirectlySamples" )
```

### Find all edges where Sailor is the target and the edge is influence-related

```{r}
sailor_influences <- edges_tbl %>%
  filter(type %in% influence_types, target == sailor_id)
```

### Join with nodes_tbl to get details of source nodes (the influencers)

```{r}
influencers_tbl <- sailor_influences %>%
  left_join(nodes_tbl, by = c("source" = "id")) %>%
  filter(`Node Type` == "Person") %>%
  select(name, genre, notable, `Node Type`, everything())
# View the result
kable(influencers_tbl)
```

::: callout-note
## Conclusion for Question 1

Sailor Shift’s musical style has been shaped by multiple artists, most notably *Cassian Storm* and *Claire Holmes*. Through lyrical references and musical interpolation, their influence can be traced in her work. These connections highlight Sailor’s deep engagement with other artists' material, reinforcing her commitment to honoring and evolving the Oceanus Folk and broader indie styles.
:::

# Question 2: Who has she collaborated with and directly or indirectly influenced?

# Question 3: How has she influenced collaborators and the Oceanus Folk community?
