---
title: "Hands-on Exercise 06"
---

# Learning Outcome

By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:

-   plotting a calender heatmap by using ggplot2 functions,

-   plotting a cycle plot by using ggplot2 function,

-   plotting a slopegraph

-   plotting a horizon chart

# 1. Getting Started

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes,
               gridExtra, readxl, knitr, data.table,
               CGPfunctions, ggHoriPlot, tidyverse,
               magick)
```

# 2. Plotting calendar heatmap

In this section, we plot a calender heatmap programmatically by using ggplot2 package.

```{r}
knitr::include_graphics("C:/Cindy-2312/ISSS608-VAA/image1.png")
```

Section outcome: - plot a calender heatmap by using ggplot2 functions and extension, - to write function using R programming, - to derive specific date and time related field by using base R and lubridate packages - to perform data preparation task by using tidyr and dplyr packages.

## 2.1. The Data

For the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.

## 2.2. Importing the data

First, we will use the code chunk below to import *eventlog.csv* file into R environment and called the data frame as attacks.

```{r}
attacks <- read_csv("data/eventlog.csv")
```

## 2.3. Examining the data structure

It is always a good practice to examine the imported data frame before further analysis is performed.

For example, kable() can be used to review the structure of the imported data frame.

```{r}
kable(head(attacks))
```

There are three columns, namely timestamp, source_country and tz.

-   timestamp field stores date-time values in POSIXct format.
-   source_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.
-   tz field stores time zone of the source IP address.

## 2.4. Data preparation

**Step 1: Deriving weekday and hour of day fields**

Before we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
}
```

**Step 2: Deriving the attacks tibble data frame**

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

Table below shows the tidy tibble table after processing.

```{r}
kable(head(attacks))
```

## 2.5. Building the calendar heatmap

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

## 2.6. Building Multiple Calendar Heatmaps

**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.

```{r} 
# Step 1: Get top 4 countries with the most attacks 
top_countries <- attacks %>%
  count(source_country, sort = TRUE) %>%
  slice_head(n = 4) %>%
  pull(source_country)
```

```{r}
# Step 2: Filter data and summarize
grouped <- attacks %>%
  filter(source_country %in% top_countries) %>%
  count(source_country, wkday, hour) %>%
  drop_na()
```

```{r, fig.width=12, fig.height=6}
# Step 3: Create the faceted heatmaps
ggplot(grouped, aes(hour, wkday, fill = n)) +
  geom_tile(color = "white", size = 0.1) +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  facet_wrap(~ source_country) +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by Weekday and Hour for Top 4 Countries") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

# 3. Plotting cycle plot
In this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

```{r}
knitr::include_graphics("C:/Cindy-2312/ISSS608-VAA/image2.png")
```

## 3.1. Data import
For the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.

The code chunk below imports *arrivals_by_air.xlsx* by using read_excel() of **readxl** package and save it as a tibble data frame called air.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

## 3.2. Deriving month and year fields
Next, two new fields called month and year are derived from Month-Year field.
```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

## 3.3. Extracting the target country
Next, the code chunk below is use to extract data for the target country (i.e. Vietnam)
```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

## 3.4. Computing year average arrivals by month

The code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month
```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

## 3.5. Plotting the cycle plot
The code chunk below is used to plot the cycle plot as shown in Slide 12/23.

```{r, fig.height=8, fig.width=20}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

# 4. Plotting slopegraph
In this section you will learn how to plot a slopegraph by using R.

## 4.1. Data Import
Import the rice data set into R environment by using the code chunk below.

```{r}
rice <- read_csv("data/rice.csv")
```
## 4.2. Plotting the slopegraph
Next, code chunk below will be used to plot a basic slopegraph as shown below.

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Dr. Kam Tin Seong")
```


